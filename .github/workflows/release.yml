name: Release

on:
  push:
    branches: 
      - master

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build-mrpack:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      MOSS_ENABLED_MODULES: mrpack
    steps:
      - uses: actions/checkout@v3
      - name: Build MrPack
        run: |
          chmod +x moss.sh
          ./moss.sh
      - name: Upload Build Results
        uses: actions/upload-artifact@v3
        with:
          name: MossClient-MrPack
          path: build/*.mrpack

  build-modlist:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
      MOSS_ENABLED_MODULES: mljson,mlhtml
    steps:
      - uses: actions/checkout@v3
      - name: Build Modlist
        run: |
         chmod +x moss.sh
         ./moss.sh
      - name: Upload Build Results
        uses: actions/upload-artifact@v3
        with:
          name: MossClient-Modlist
          path: |
            build/*.html
            build/*.json

  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    needs: [build-mrpack, build-modlist]
    steps:
      - uses: actions/checkout@v3
      - run: mkdir dist
      - uses: actions/download-artifact@v3
        with:
          name: MossClient-MrPack
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: MossClient-Modlist
          path: dist
      - name: Create Release
        run: |
          pushd dist
          shasum -a 256 * > checksums.txt
          popd
          
          version=$(grep -oP 'version = "\K[^"]+' pack/pack.toml)
          minecraft=$(grep -oP 'minecraft = "\K[^"]+' pack/pack.toml)
          title="Moss Client ${version}"
          
          release_args=(
            "$version"
            --title "Moss Client ${version}"
            --generate-notes
          )

          echo "RELEASE_TITLE=$title" >> $GITHUB_ENV
          echo "RELEASE_VERSION=$version" >> $GITHUB_ENV
          echo "RELEASE_CHANNEL=release" >> $GITHUB_ENV
          echo "RELEASE_MC_VERSION=$minecraft" >> $GITHUB_ENV
          
          gh release create "${release_args[@]}" ./dist/*

          changelog=$(gh release view --json body --jq .body | tr -d '\n')
          echo "RELEASE_CHANGELOG=$changelog" >> $GITHUB_ENV
      - name: Publish to Modrinth
        uses: Kir-Antipov/mc-publish@v3.3.0
        with:
          modrinth-id: 7FzUwEV3
          modrinth-token: ${{ secrets.MODRINTH_TOKEN }}

          files: dist/*.mrpack
          name: ${{ env.RELEASE_TITLE }}
          version: ${{ env.RELEASE_VERSION }}
          version-type: ${{ env.RELEASE_CHANNEL }}
          changelog: ${{ env.RELEASE_CHANGELOG }}

          loaders: quilt
          game-versions: ${{ env.RELEASE_MC_VERSION }}
      - name: Sync Modrinth Body
        run: |
          mkdir .tmp
          sed '/<!-- modrinth_exclude.start -->/,/<!-- modrinth_exclude.end -->/d' README.md > .tmp/modrinth-readme-p1.md
          cat release/modrinth/modrinth-header.md .tmp/modrinth-readme-p1.md > .tmp/modrinth-readme-final.md
          mv .tmp/modrinth-readme-final.md modrinth-readme.md
          rm -rf .tmp

          curl -X PATCH \
            -H "Authorization: ${{ secrets.MODRINTH_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data-raw "$(jq -n --arg body "$(cat modrinth-readme.md)" '{body: $body}' | tr -d '\n')" \
            https://api.modrinth.com/v2/project/7FzUwEV3
  commit-website:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      GH_TOKEN: ${{ github.token }}
    needs: [build-modlist]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: gh-pages
      - uses: actions/download-artifact@v3
        with:
          name: MossClient-Modlist
          path: build
      - name: Update mods
        run: |
          rm src/mods.html
          cp build/mods.html src
          rm -rf build
      - name: Publish
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Sync mod-list with release"
          git push
  deploy-website:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    concurrency:
      group: "pages"
      cancel-in-progress: false
    needs: [commit-website]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: gh-pages
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Build
        run: yarn build
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4